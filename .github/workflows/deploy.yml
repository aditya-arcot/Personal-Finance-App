name: Deploy in Docker
on:
    workflow_call:
        inputs:
            runner:
                required: true
                type: string
            repo:
                required: true
                type: string
            server_image:
                required: true
                type: string
            client_image:
                required: true
                type: string
            image_tag:
                required: true
                type: string

jobs:
    deploy:
        runs-on: ${{ inputs.runner }}
        environment: ${{ github.ref_name == 'main' && 'prod' || 'test' }}
        steps:
            - name: unlock keychain
              run: security unlock-keychain -p ${{ secrets.KEYCHAIN_PASSWORD }} login.keychain

            - name: checkout
              uses: actions/checkout@v3

            - name: setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 'lts/*'
                  cache: 'npm'

            - name: install, build (server)
              run: |
                  cd server/
                  npm ci
                  npm run build

            - name: install, build (client)
              run: |
                  cd client/
                  npm ci
                  npm run build

            - name: create .env (server)
              run: |
                  cd server/
                  echo "CLIENT_LOGTAIL_TOKEN=${{ secrets.CLIENT_LOGTAIL_TOKEN }}" >> .env
                  echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
                  echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
                  echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
                  echo "DB_USER=${{ secrets.DB_USER }}" >> .env
                  if [ -n "${{ secrets.EXTERNAL_CLIENT_URL }}" ]; then
                    echo "EXTERNAL_CLIENT_URL=${{ secrets.EXTERNAL_CLIENT_URL }}" >> .env
                  fi
                  echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" >> .env
                  echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
                  echo "SERVER_LOGTAIL_TOKEN=${{ secrets.SERVER_LOGTAIL_TOKEN }}" >> .env
                  echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> .env

            - name: copy files (server)
              run: |
                  cd server/
                  mkdir stage
                  cp -r .env Dockerfile package.json package-lock.json dist stage/

            - name: copy files (client)
              run: |
                  cd client/
                  mkdir stage
                  cp -r Dockerfile nginx.conf dist stage/

            - name: build, push docker image (server)
              run: |
                  cd server/stage/
                  IMAGE=${{ secrets.DOCKER_REGISTRY }}/${{ inputs.server_image }}:${{ inputs.image_tag }}
                  docker build -t $IMAGE .
                  docker push $IMAGE
                  echo "SERVER_IMAGE=${IMAGE}" >> $GITHUB_ENV

            - name: build, push docker image (client)
              run: |
                  cd client/stage/
                  IMAGE=${{ secrets.DOCKER_REGISTRY }}/${{ inputs.client_image }}:${{ inputs.image_tag }}
                  docker build -t $IMAGE .
                  docker push $IMAGE
                  echo "CLIENT_IMAGE=${IMAGE}" >> $GITHUB_ENV

            - name: start docker
              run: |
                  REPO=${{ inputs.repo }} \
                  SERVER_IMAGE=${{ env.SERVER_IMAGE }} \
                  CLIENT_IMAGE=${{ env.CLIENT_IMAGE }} \
                  docker-compose up -d
