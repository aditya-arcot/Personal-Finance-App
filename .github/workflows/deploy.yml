name: Deploy in Docker
on:
    workflow_call:
        inputs:
            runner:
                required: true
                type: string
            repo:
                required: true
                type: string
            server_image:
                required: true
                type: string
            client_image:
                required: true
                type: string
            image_tag:
                required: true
                type: string

jobs:
    deploy:
        runs-on: ${{ inputs.runner }}
        environment: ${{ github.ref_name == 'main' && 'prod' || 'test' }}
        steps:
            - name: checkout
              uses: actions/checkout@v3

            - name: setup node
              uses: actions/setup-node@v4
              with:
                  node-version: 'lts/*'
                  cache: 'npm'

            - name: install, build (server)
              run: |
                  cd server/
                  npm ci
                  npm run build

            - name: create .env (server)
              run: |
                  cd server/
                  echo "CLIENT_LOGTAIL_TOKEN=${{ secrets.CLIENT_LOGTAIL_TOKEN }}" >> .env
                  echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
                  echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
                  echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
                  echo "DB_USER=${{ secrets.DB_USER }}" >> .env
                  echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" >> .env
                  echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
                  echo "SERVER_LOGTAIL_TOKEN=${{ secrets.SERVER_LOGTAIL_TOKEN }}" >> .env
                  echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> .env

            - name: copy files (server)
              run: |
                  cd server/
                  mkdir stage
                  cp -r .env Dockerfile package.json package-lock.json dist stage/

            - name: build, push docker image (server)
              run: |
                  cd server/stage/
                  IMAGE=${{ secrets.DOCKER_REGISTRY }}/${{ inputs.server_image }}:${{ inputs.image_tag }}
                  docker build -t $IMAGE .
                  docker push $IMAGE
                  echo "SERVER_IMAGE=${IMAGE}" >> $GITHUB_ENV

            - name: start docker (server)
              run: |
                  cd server
                  REPO=${{ inputs.repo }} \
                  IMAGE=${{ env.SERVER_IMAGE }} \
                  docker-compose up -d

            # - name: install, build - client
            #   run: |
            #       cd client/
            #       npm ci
            #       npm run build

            # - name: copy files - client
            #   run: |
            #       cd client/
            #       mkdir stage
            #       cp -r Dockerfile dist stage/
